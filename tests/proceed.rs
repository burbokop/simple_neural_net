use simple_neural_net::{compose_layers, Layer};

fn sigmoid(x: f64) -> f64 {
    use std::f64::consts::E;
    1. / (1. + E.powf(-x))
}

#[test]
fn zero() {
    compose_layers!(Net, 5, 5, 5, 5);

    let net = Net::new(
        [
            ([0., 0., 0., 0., 0.], 0.).into(),
            ([0., 0., 0., 0., 0.], 0.).into(),
            ([0., 0., 0., 0., 0.], 0.).into(),
            ([0., 0., 0., 0., 0.], 0.).into(),
            ([0., 0., 0., 0., 0.], 0.).into(),
        ]
        .into(),
        [
            ([0., 0., 0., 0., 0.], 0.).into(),
            ([0., 0., 0., 0., 0.], 0.).into(),
            ([0., 0., 0., 0., 0.], 0.).into(),
            ([0., 0., 0., 0., 0.], 0.).into(),
            ([0., 0., 0., 0., 0.], 0.).into(),
        ]
        .into(),
        [
            ([0., 0., 0., 0., 0.], 0.).into(),
            ([0., 0., 0., 0., 0.], 0.).into(),
            ([0., 0., 0., 0., 0.], 0.).into(),
            ([0., 0., 0., 0., 0.], 0.).into(),
            ([0., 0., 0., 0., 0.], 0.).into(),
        ]
        .into(),
    );

    let res = net.proceed(&[0., 0., 0., 0., 0.], sigmoid);
    assert_eq!(res, [0.5, 0.5, 0.5, 0.5, 0.5].into());
}

#[test]
fn some_random_data() {
    compose_layers!(Net, 5, 5, 5, 5);

    let net: Net<f64> = (
        [
            (
                [0.30927665, 0.06163432, 0.63960286, 0.22561086, 0.17446931],
                0.12593,
            )
                .into(),
            (
                [0.0711555, 0.49380738, 0.36028835, 0.61848082, 0.65859579],
                0.73481,
            )
                .into(),
            (
                [0.84159305, 0.35680235, 0.122824, 0.32048447, 0.67226504],
                0.02740,
            )
                .into(),
            (
                [0.29009482, 0.22721313, 0.05697921, 0.21231695, 0.00268923],
                0.12962,
            )
                .into(),
            (
                [0.46753259, 0.91816199, 0.27784661, 0.10908212, 0.33997584],
                0.10464,
            )
                .into(),
        ]
        .into(),
        [
            (
                [0.90016042, 0.19490804, 0.19632792, 0.8186547, 0.73967498],
                0.36953,
            )
                .into(),
            (
                [0.63117388, 0.76932061, 0.40261844, 0.55145, 0.60257886],
                0.27394,
            )
                .into(),
            (
                [0.7340272, 0.29310318, 0.33145857, 0.68835242, 0.50461504],
                0.17395,
            )
                .into(),
            (
                [0.96595638, 0.33170376, 0.19414604, 0.26219506, 0.86458909],
                0.52694,
            )
                .into(),
            (
                [0.75978182, 0.23044127, 0.96595424, 0.40503686, 0.13852647],
                0.36483,
            )
                .into(),
        ]
        .into(),
        [
            (
                [0.56304895, 0.24399554, 0.71762822, 0.93948633, 0.42997699],
                0.75367,
            )
                .into(),
            (
                [0.91382417, 0.04583513, 0.34367568, 0.49576031, 0.65650908],
                0.42368,
            )
                .into(),
            (
                [0.46547935, 0.84989784, 0.31656622, 0.44557494, 0.01398856],
                0.32467,
            )
                .into(),
            (
                [0.60553682, 0.33301235, 0.15341491, 0.64648842, 0.9961833],
                0.33577,
            )
                .into(),
            (
                [0.81031982, 0.53551236, 0.32707381, 0.85715439, 0.96808016],
                0.42574,
            )
                .into(),
        ]
        .into(),
    )
        .into();

    let res = net.proceed(&[0., 0., 0., 0., 0.], sigmoid);
    assert_eq!(
        res,
        [
            0.7807506702225895,
            0.7855329896417399,
            0.7628528229489719,
            0.8277331400714887,
            0.883076290980655
        ]
        .into()
    );
}

#[test]
fn different_sizes() {
    compose_layers!(Net, 2, 3, 4, 5);

    let net = Net::new(
        [
            ([0., 0.], 0.).into(),
            ([0., 0.], 0.).into(),
            ([0., 0.], 0.).into(),
        ]
        .into(),
        [
            ([0., 0., 0.], 0.).into(),
            ([0., 0., 0.], 0.).into(),
            ([0., 0., 0.], 0.).into(),
            ([0., 0., 0.], 0.).into(),
        ]
        .into(),
        [
            ([0., 0., 0., 0.], 0.).into(),
            ([0., 0., 0., 0.], 0.).into(),
            ([0., 0., 0., 0.], 0.).into(),
            ([0., 0., 0., 0.], 0.).into(),
            ([0., 0., 0., 0.], 0.).into(),
        ]
        .into(),
    );

    let res = net.proceed(&[0., 0.], sigmoid);
    assert_eq!(res, [0.5, 0.5, 0.5, 0.5, 0.5].into());
}
